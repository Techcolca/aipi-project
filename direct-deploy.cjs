/**
 * Despliegue directo de la aplicaci√≥n AIPI
 * Este script ejecuta la aplicaci√≥n exactamente como est√°,
 * modificando solamente el puerto para evitar conflictos
 */
const { execSync, spawn } = require('child_process');
const fs = require('fs');
const path = require('path');
const express = require('express');
const http = require('http');

// Puerto personalizado para evitar conflictos
const PORT = process.env.PORT || 3000;
const INTERNAL_PORT = 3001;

console.log('üöÄ Iniciando despliegue directo de la aplicaci√≥n AIPI...');

// Verificar el entorno actual
try {
  // Verificar si estamos en un entorno de despliegue o de desarrollo
  const isDeployment = process.env.REPL_SLUG && process.env.REPL_OWNER;
  
  if (isDeployment) {
    console.log('Detectado entorno de despliegue Replit');
  } else {
    console.log('Detectado entorno de desarrollo local');
  }
  
  // Verificar que los directorios principales existan
  const directories = ['client', 'server', 'shared'];
  for (const dir of directories) {
    if (!fs.existsSync(`./${dir}`)) {
      console.error(`‚ùå Error cr√≠tico: No se encontr√≥ el directorio ${dir}`);
      process.exit(1);
    }
  }
  
  console.log('‚úÖ Verificaci√≥n de directorios exitosa');
} catch (error) {
  console.error('‚ùå Error en verificaci√≥n inicial:', error);
}

// Crear enlaces simb√≥licos necesarios (si no existen)
try {
  // Enlace src -> client/src (crucial para el funcionamiento correcto)
  if (!fs.existsSync('./src')) {
    if (fs.existsSync('./client/src')) {
      try {
        fs.symlinkSync('./client/src', './src', 'dir');
        console.log('‚úÖ Enlace simb√≥lico creado: ./client/src -> ./src');
      } catch (e) {
        console.log('‚ö†Ô∏è No se pudo crear enlace simb√≥lico. Intentando aproximaci√≥n alternativa.');
        // Si fall√≥ el symlink, intentar ejecutar comando en shell
        execSync('ln -sf ./client/src ./src');
        console.log('‚úÖ Enlace creado v√≠a shell command');
      }
    } else {
      console.error('‚ùå No se puede crear enlace: ./client/src no existe');
    }
  } else {
    console.log('‚ÑπÔ∏è Enlace simb√≥lico src ya existe');
  }
} catch (error) {
  console.error('‚ùå Error creando enlaces simb√≥licos:', error);
}

// Funci√≥n para iniciar un proxy simple
function startProxy() {
  const app = express();
  
  console.log(`üîÑ Iniciando proxy en puerto ${PORT} -> ${INTERNAL_PORT}`);
  
  // Ruta para verificar estado
  app.get('/deployment-status', (req, res) => {
    res.json({ 
      status: 'running',
      message: 'Servidor de despliegue funcionando correctamente',
      port: PORT,
      internalPort: INTERNAL_PORT,
      timestamp: new Date().toISOString()
    });
  });
  
  // Todo lo dem√°s se env√≠a al servidor interno
  app.use((req, res) => {
    const options = {
      hostname: 'localhost',
      port: INTERNAL_PORT,
      path: req.url,
      method: req.method,
      headers: req.headers
    };
    
    const proxyReq = http.request(options, (proxyRes) => {
      res.writeHead(proxyRes.statusCode, proxyRes.headers);
      proxyRes.pipe(res, { end: true });
    });
    
    proxyReq.on('error', (err) => {
      console.error('Error en proxy:', err.message);
      
      if (!res.headersSent) {
        res.status(502).send('Error de conexi√≥n con la aplicaci√≥n interna.');
      }
    });
    
    if (req.body) {
      proxyReq.write(JSON.stringify(req.body));
    }
    
    req.pipe(proxyReq, { end: true });
  });
  
  // Iniciar servidor proxy
  app.listen(PORT, '0.0.0.0', () => {
    console.log(`‚úÖ Proxy iniciado en puerto ${PORT}`);
  });
}

// Funci√≥n principal para ejecutar la aplicaci√≥n con puerto personalizado
function startApp() {
  console.log('üöÄ Ejecutando aplicaci√≥n AIPI original...');
  
  // Verificar si existe el archivo npm en PATH
  try {
    execSync('which npm');
    console.log('‚úÖ npm encontrado en PATH');
  } catch (error) {
    console.error('‚ùå npm no encontrado en PATH, intentando usar el de Replit');
  }
  
  // Modificar el entorno para usar puerto personalizado
  const env = {
    ...process.env,
    PORT: INTERNAL_PORT.toString()
  };
  
  // Comando para iniciar aplicaci√≥n
  const startCommand = 'npm run dev';
  console.log(`üìã Ejecutando: ${startCommand} (puerto: ${INTERNAL_PORT})`);
  
  // Ejecutar la aplicaci√≥n
  const appProcess = spawn(startCommand, {
    shell: true,
    stdio: 'inherit',
    env
  });
  
  appProcess.on('error', (error) => {
    console.error(`‚ùå Error al iniciar la aplicaci√≥n: ${error.message}`);
  });
  
  appProcess.on('close', (code) => {
    console.log(`‚ö†Ô∏è La aplicaci√≥n se cerr√≥ con c√≥digo: ${code}`);
    
    if (code !== 0) {
      console.log('üîÑ Reiniciando la aplicaci√≥n en 5 segundos...');
      setTimeout(startApp, 5000);
    }
  });
}

// Iniciar la aplicaci√≥n y el proxy
startProxy(); // Primero iniciamos el proxy
setTimeout(() => {
  startApp(); // Despu√©s iniciamos la aplicaci√≥n en el puerto interno
}, 1000);